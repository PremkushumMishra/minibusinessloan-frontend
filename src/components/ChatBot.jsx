import React, { useState, useEffect, useRef } from "react";
import { useNavigate } from "react-router-dom";
import { AnimatePresence, motion } from "framer-motion";
import {
  Bot,
  User,
  Send,
  MessageCircle,
  XCircle,
} from "lucide-react";

const ChatBot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([
    {
      type: "bot",
      content: getGreeting() + " ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§≤‡•ã‡§® ‡§Ü‡§µ‡•á‡§¶‡§® ‡§Æ‡•á‡§Ç ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?",
      options: [
        "‡§≤‡•ã‡§® ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡•à‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç?",
        "‡§Æ‡•Å‡§ù‡•á ‡§ï‡•å‡§® ‡§∏‡•á ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§ö‡§æ‡§π‡§ø‡§è?",
        "‡§¶‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§∂‡•Å‡§≤‡•ç‡§ï",
        "EMI ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§ü‡§∞",
        "‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§¶‡•á‡§ñ‡•á‡§Ç",
      ],
    },
  ]);
  const [inputValue, setInputValue] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [showEmiCalculator, setShowEmiCalculator] = useState(false);
  const [emiInputs, setEmiInputs] = useState({
    loanAmount: "",
    interestRate: "",
    tenure: "",
  });
  const messagesEndRef = useRef(null);
  const navigate = useNavigate();

  const minDays = 7;
  const maxDays = 100;
  const monthlyInterestRate = 20;

  function getGreeting() {
    const hour = new Date().getHours();
    if (hour < 12) return "‡§∏‡•Å‡§™‡•ç‡§∞‡§≠‡§æ‡§§! üëã";
    if (hour < 18) return "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! üëã";
    return "‡§∂‡•Å‡§≠ ‡§∏‡§Ç‡§ß‡•ç‡§Ø‡§æ! üëã";
  }

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const sendMessage = () => {
    if (!inputValue.trim()) return;
    handleOptionClick(inputValue.trim());
    setInputValue("");
  };

  const handleOptionClick = (option) => {
    setMessages((prev) => [...prev, { type: "user", content: option }]);
    setIsTyping(true);
    setTimeout(() => {
      setIsTyping(false);
      handleBotResponse(option);
    }, 1000);
  };

  const handleBotResponse = (option) => {
    let botMessage = { type: "bot", content: "", options: [] };

    switch (option) {
      case "‡§≤‡•ã‡§® ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡•à‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç?":
        botMessage.content =
          '‡§≤‡•ã‡§® ‡§Ü‡§µ‡•á‡§¶‡§® ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è "‡§Ö‡§≠‡•Ä ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡§∞‡•á‡§Ç" ‡§¨‡§ü‡§® ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§';
        botMessage.options = [
          "‡§Æ‡•Å‡§ù‡•á ‡§ï‡•å‡§® ‡§∏‡•á ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§ö‡§æ‡§π‡§ø‡§è?",
          "‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Ç",
        ];
        break;
      case "‡§Æ‡•Å‡§ù‡•á ‡§ï‡•å‡§® ‡§∏‡•á ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§ö‡§æ‡§π‡§ø‡§è?":
        botMessage.content =
          "‡§ï‡•á‡§µ‡§≤ ‡§¨‡•à‡§Ç‡§ï ‡§∏‡•ç‡§ü‡•á‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§î‡§∞ ‡§â‡§¶‡•ç‡§Ø‡§Æ ‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•à‡•§ üìÑ";
        botMessage.options = ["‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Ç"];
        break;
      case "‡§¶‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§∂‡•Å‡§≤‡•ç‡§ï":
        botMessage.content =
          "‚Çπ ‡§≤‡•ã‡§® ‡§∞‡§æ‡§∂‡§ø: ‚Çπ5,000 ‡§∏‡•á ‚Çπ10,00,000 ‡§§‡§ï\nüìÖ ‡§Ö‡§µ‡§ß‡§ø: 7 ‡§∏‡•á 100 ‡§¶‡§ø‡§®\nüìä ‡§¨‡•ç‡§Ø‡§æ‡§ú ‡§¶‡§∞: 20% ‡§™‡•ç‡§∞‡§§‡§ø ‡§Æ‡§æ‡§π\n‚úÖ ‡§ï‡•ã‡§à ‡§™‡•ç‡§∞‡•Ä-‡§ï‡•ç‡§≤‡•ã‡§ú‡§º‡§∞ ‡§Ø‡§æ ‡§™‡•ç‡§∞‡•Ä‡§™‡•á‡§Æ‡•á‡§Ç‡§ü ‡§ö‡§æ‡§∞‡•ç‡§ú ‡§®‡§π‡•Ä‡§Ç";
        botMessage.options = ["‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Ç"];
        break;
      case "EMI ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§ü‡§∞":
        botMessage.content =
          "EMI ‡§ó‡§£‡§®‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∞‡§æ‡§∂‡§ø ‡§î‡§∞ ‡§Ö‡§µ‡§ß‡§ø ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§â‡§¶‡§æ‡§π‡§∞‡§£: ‚Çπ10000, 30 ‡§¶‡§ø‡§®";
        setShowEmiCalculator(true);
        break;
      case "‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§¶‡•á‡§ñ‡•á‡§Ç":
        botMessage.content = "FAQs:\n1. ‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§Æ ‡§≤‡•ã‡§® ‚Çπ5000\n2. ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‚Çπ10 ‡§≤‡§æ‡§ñ";
        botMessage.options = ["‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Ç"];
        break;
      case "‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Ç":
        botMessage.content = "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§î‡§∞ ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?";
        botMessage.options = [
          "‡§≤‡•ã‡§® ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡•à‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç?",
          "‡§Æ‡•Å‡§ù‡•á ‡§ï‡•å‡§® ‡§∏‡•á ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§ö‡§æ‡§π‡§ø‡§è?",
          "‡§¶‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§∂‡•Å‡§≤‡•ç‡§ï",
          "EMI ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§ü‡§∞",
          "‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§¶‡•á‡§ñ‡•á‡§Ç",
        ];
        break;
      default:
        botMessage.content =
          "‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§µ‡§π ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§™‡§æ‡§Ø‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§ö‡•Å‡§®‡•á‡§Ç‡•§";
        botMessage.options = ["‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Ç"];
    }

    setMessages((prev) => [...prev, botMessage]);
  };

  const calculateEmi = () => {
    const { loanAmount, tenure } = emiInputs;
    const principal = parseFloat(loanAmount);
    const days = parseInt(tenure);

    if (!principal || !days || days < minDays || days > maxDays) {
      setMessages((prev) => [
        ...prev,
        {
          type: "bot",
          content: `‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∞‡§æ‡§∂‡§ø ‡§î‡§∞ ${minDays}-${maxDays} ‡§¶‡§ø‡§® ‡§ï‡•á ‡§¨‡•Ä‡§ö ‡§ï‡•Ä ‡§Ö‡§µ‡§ß‡§ø ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§`,
        },
      ]);
      return;
    }

    // Calculate flat 20% interest
    const totalInterest = principal * 0.20; // 20% of principal amount
    const totalAmount = principal + totalInterest;
    const dailyEmi = totalAmount / days;

    setMessages((prev) => [
      ...prev,
      {
        type: "bot",
        content: `üí∞ ‡§¶‡•à‡§®‡§ø‡§ï EMI: ‚Çπ${Math.round(dailyEmi)}\nüíµ ‡§ï‡•Å‡§≤ ‡§¨‡•ç‡§Ø‡§æ‡§ú: ‚Çπ${Math.round(
          totalInterest
        )}\nüìä ‡§ï‡•Å‡§≤ ‡§∞‡§æ‡§∂‡§ø: ‚Çπ${Math.round(totalAmount)}`,
        options: ["‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Ç"],
      },
    ]);
    setShowEmiCalculator(false);
    setEmiInputs({ loanAmount: "", interestRate: "", tenure: "" });
  };

  return (
    <div className="fixed bottom-4 right-4 z-50">
      <motion.button
        onClick={() => setIsOpen(!isOpen)}
        className="w-14 h-14 bg-blue-600 rounded-full flex items-center justify-center text-white shadow-lg"
        whileTap={{ scale: 0.9 }}
        whileHover={{ scale: 1.1 }}
      >
        {isOpen ? <XCircle /> : <MessageCircle />}
      </motion.button>

      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, scale: 0.9, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.9, y: 20 }}
            transition={{ type: "spring", stiffness: 300, damping: 20 }}
            className="absolute bottom-16 right-0 w-80 bg-white rounded-xl shadow-xl flex flex-col"
          >
            <div className="p-4 border-b font-semibold text-blue-700 flex items-center gap-2">
              <Bot size={20} />
              ‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§≤‡•ã‡§®‡§∏‡§π‡§æ‡§Ø‡§ï!
            </div>

            <div className="p-4 flex-1 overflow-y-auto max-h-96 text-sm space-y-3">
              {messages.map((msg, i) => (
                <motion.div
                  key={i}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                  className={`flex ${
                    msg.type === "user" ? "justify-end" : "justify-start"
                  }`}
                >
                  <div
                    className={`p-2 rounded-lg max-w-[80%] ${
                      msg.type === "user"
                        ? "bg-blue-100 text-right"
                        : "bg-gray-100"
                    }`}
                  >
                    {msg.content.split("\n").map((line, j) => (
                      <div key={j}>{line}</div>
                    ))}
                    {msg.options?.length > 0 && (
                      <div className="mt-2 flex flex-col gap-1">
                        {msg.options.map((opt, j) => (
                          <motion.button
                            key={j}
                            whileTap={{ scale: 0.95 }}
                            whileHover={{ scale: 1.05 }}
                            onClick={() => handleOptionClick(opt)}
                            className="bg-blue-50 hover:bg-blue-100 text-blue-700 text-xs py-1 px-2 rounded transition-all"
                          >
                            {opt}
                          </motion.button>
                        ))}
                      </div>
                    )}
                  </div>
                </motion.div>
              ))}
              {isTyping && (
                <div className="flex gap-1 items-center text-gray-500 text-sm px-2">
                  <span className="animate-bounce">‚Ä¢</span>
                  <span className="animate-bounce delay-150">‚Ä¢</span>
                  <span className="animate-bounce delay-300">‚Ä¢</span>
                </div>
              )}
              <div ref={messagesEndRef} />
            </div>

            {showEmiCalculator && (
              <div className="p-3 border-t bg-blue-50 text-sm space-y-2">
                <input
                  type="number"
                  placeholder="Loan Amount (‚Çπ)"
                  value={emiInputs.loanAmount}
                  onChange={(e) =>
                    setEmiInputs({ ...emiInputs, loanAmount: e.target.value })
                  }
                  className="w-full p-1 rounded border"
                />
                <input
                  type="number"
                  placeholder="Tenure (in days)"
                  value={emiInputs.tenure}
                  onChange={(e) =>
                    setEmiInputs({ ...emiInputs, tenure: e.target.value })
                  }
                  className="w-full p-1 rounded border"
                />
                <button
                  onClick={calculateEmi}
                  className="w-full bg-blue-600 text-white py-1 rounded"
                >
                  EMI ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
                </button>
              </div>
            )}

            <div className="flex border-t">
              <input
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyDown={(e) => e.key === "Enter" && sendMessage()}
                placeholder="Type here..."
                className="flex-1 p-2 text-sm border-none focus:outline-none"
              />
              <button
                onClick={sendMessage}
                className="bg-blue-600 text-white px-4"
              >
                <Send size={16} />
              </button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default ChatBot;
